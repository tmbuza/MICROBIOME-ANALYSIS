from snakemake.utils import min_version

min_version("6.10.0")

# Configuration file containing all user-specified settings
configfile: "config/config.yaml"

# mothurSamples = list(set(glob_wildcards(os.path.join('data/mothur/reads/', '{sample}_{readNum, R[12]}_001.fastq.gz')).sample))

sraSamples = list(set(glob_wildcards(os.path.join('data/reads/', '{sample}_{sraNum, [12]}.fastq.gz')).sample))

import os
import csv
import pandas as pd

# RUNINFO="data/metadata"
# METADATA=pd.read_csv('OUTDIR/SraRunTable.csv').loc[0:3]
# ACCESSIONS=METADATA['Run'].tolist() # Specify the column containing the accession, in this demo is Run
OUTDIR="data/metadata" 

if not os.path.exists(OUTDIR):
   os.makedirs(OUTDIR)


# Master rule for controlling workflow.
rule all:
    input:
        # expand("data/metadata/runinfo_{bioproject}.csv", bioproject=config["bioproject"]),
        # "data/metadata/metadata_16S.csv",
        # "data/metadata/metadata_WGS.csv",        
        # expand("data/metadata/{bioproject}_full_metadata.csv", bioproject="PRJNA477349"),
        # expand("data/metadata/{bioproject}_tidy_metadata.csv", bioproject="PRJNA477349"),
        # expand("results/{bioproject}_sra_accessions.txt", bioproject=config["bioproject"]),
        # expand("results/{bioproject}_read_size_asc.csv", bioproject=["PRJNA477349", "PRJNA685168"]),
        # expand("results/{bioproject}_read_size_desc.csv", bioproject=["PRJNA477349", "PRJNA685168"]),
        # expand("images/{bioproject}_gps.png", bioproject=["PRJNA477349", "PRJNA802976", "PRJEB21612"]),
        "index.html",

# Fetch SRRunInfo directly (incode)
rule fetch_sra_runinfo:
    output:
        runinfo=expand("data/metadata/runinfo_{bioproject}.csv", bioproject=config["bioproject"]),
    shell:
         "bash workflow/scripts/fetch_sra_runinfo.sh"

# Process RunInfo metadata
rule user_optional_filtering:
    input:
        rules.fetch_sra_runinfo.output
    output:
        amp="data/metadata/metadata_16S.csv",
        wgs="data/metadata/metadata_WGS.csv",
    script:
        "scripts/select_runinfo.R"
        

 # SRA RunSelectir metadata (must be downloaded first)
rule process_sra_metadata:  
    input:
        runmetadata=expand("data/metadata/{bioproject}.csv", bioproject=config["bioproject"]),
    output:
        "data/metadata/{bioproject}_tidy_metadata.csv",
    script:
        "scripts/process_sra_metadata.R"       


# Demo merging downloaded and esearch metadata
rule merge_runselector_runinfo:
    input:
        esearch=rules.fetch_sra_runinfo.output,
        runmetadata=expand("data/metadata/{bioproject}.csv", bioproject="PRJNA477349")
    output:
        metadata=expand("data/metadata/{bioproject}_full_metadata.csv", bioproject="PRJNA477349")
    script:
        "scripts/merge_metadata.R"


# Get SRA accessions, the first column of metadata
rule extract_accessions:
    input:
        runinfo=expand("data/metadata/runinfo_{bioproject}.csv", bioproject=config["bioproject"]),
        runmetadata=expand(rules.process_sra_metadata.output, bioproject=config["bioproject"]),
        metadata=expand("data/metadata/{bioproject}_full_metadata.csv", bioproject="PRJNA477349")
    output:
        runacc=expand("results/{bioproject}_sra_accessions.txt", bioproject=config["bioproject"]),
    script:
        "scripts/get_run_accessions.py"

# Get variable barplot
rule get_variable_freq:
    input:
        runmetadata=expand(rules.process_sra_metadata.output, bioproject=config["bioproject"]),
    output:
        png=expand("images/{bioproject}_variable_freq.png", bioproject=["PRJNA477349", "PRJNA685168"]),
        svg=expand("images/{bioproject}_variable_freq.svg", bioproject=["PRJNA477349", "PRJNA685168"]),
    script:
        "scripts/plot_var_freq.R"


# Get read size
rule explore_read_size:
    input:
        expand("data/metadata/{bioproject}_tidy_metadata.csv", bioproject=config["bioproject"]),
    output:
        asc=expand("results/{bioproject}_read_size_asc.csv", bioproject=["PRJNA477349", "PRJNA685168"]),
        desc=expand("results/{bioproject}_read_size_desc.csv", bioproject=["PRJNA477349", "PRJNA685168"]),
    script:
        "scripts/explore_read_size.R"



# Get sample location 
rule plot_sampling_points:
    input:
        expand("data/metadata/{bioproject}_tidy_metadata.csv", bioproject=config["bioproject"]),
    output:
        gps=expand("images/{bioproject}_gps.png", bioproject=["PRJNA477349", "PRJNA802976", "PRJEB21612"]),
    script:
        "scripts/get_sample_gps.R"





# # # Dowload the SRA RUN reads
# # rule download_sra_reads: 
# #     input:
# #         sra_acc=rules.extract_accessions.output.sra_acc,
# #     output:
# #         "data/reads/{sample}_{sraNum}.fastq",
# #     params:
# #         outdir=OUTDIR,
# #         temp=TEMP,
# #     threads: 1
# #     shell:
# #         """
# #         fasterq-dump \
# #         --split-3 --force \
# #         --skip-technical {wildcards.sample} \
# #         --outdir {params.outdir} \
# #         --temp {params.temp} \
# #         --threads {threads}
# #         """

# # # Subset a test data
# # rule seqkit_subset_fastq:
# #     input:
# #         expand("data/reads/{accession}_1.fastq", accession=ACCESSIONS),
# #         expand("data/reads/{accession}_2.fastq", accession=ACCESSIONS),
# #     output:
# #         "data/test/{accession}_1_sub.fastq",
# #         "data/test/{accession}_2_sub.fastq",
# #     threads: 1
# #     shell:
# #         """
# #         bash workflow/scripts/subset_fastq.sh
# #         """


# # rule seqkit_simple_stats:
# #     input:
# #         script="workflow/scripts/seqkit_stat_1.sh",
# #         rawreads=expand("data/reads/{accession}_{sraNum}.fastq", accession=ACCESSIONS, sraNum=config["sraNum"]),
# #     output:
# #         seqkit1="results/stats1/seqkit_stats.txt",
# #     threads: 1
# #     shell:
# #       "bash {input.script}"


# # rule mothur_mapping_file:
# #     input:
# #         stats1="results/stats1/seqkit_stats.txt"
# #     output:
# #         files="data/metadata/mothur_mapping_file.tsv",
# #     threads: 1
# #     script:
# #       "scripts/mothur_mapping_file.R"


# # rule mothur_design_file:
# #     input:
# #         files="data/metadata/mothur_mapping_file.tsv",
# #     output:
# #         files="data/metadata/mothur_design_file.tsv",
# #     threads: 1
# #     script:
# #       "scripts/mothur_design_file.R"

# # # Downloading and formatting SILVA and RDP reference databases. The v4 region is extracted from 
# # # SILVA database for use as reference alignment.
# # rule mothur_references:
# # 	input:
# # 		script="workflow/scripts/mothurReferences.sh"
# # 	output:
# # 		silvaV4="data/mothur/references/silva.v4.align",
# # 		rdpFasta="data/mothur/references/trainset16_022016.pds.fasta",
# # 		rdpTax="data/mothur/references/trainset16_022016.pds.tax"
# # 	conda:
# # 		"envs/mothur.yaml"
# # 	shell:
# # 		"bash {input.script}"


# # # Downloading the Zymo mock sequence files and extracting v4 region for error estimation.
# # rule mothur_zymo_mock:
# # 	input:
# # 		script="workflow/scripts/mothurMock.sh",
# # 		silvaV4="data/mothur/references/silva.v4.align",
# # 	output:
# # 		mockV4="data/mothur/references/zymo.mock.16S.v4.fasta"
# # 	conda:
# # 		"envs/mothur.yaml"
# # 	shell:
# # 		"bash {input.script}"


# # rule gather_bioinfo_resources:
# #     shell:
# #         """
# #         bash workflow/scripts/get_bioinfo_resources.sh
# #         """


# Get project tree
rule project_tree:
    output:
        tree="images/project_tree.txt"
    shell:
        """
        bash workflow/scripts/tree.sh
        """

# Get smk static report
rule static_snakemake_report:
    output:
        smkhtml="report.html",
        html2png="images/smkreport/screenshot.png"
    shell:
        """
        bash workflow/scripts/smk_html_report.sh
        """

rule deploy_to_github_pages:
    input:
        script="workflow/scripts/render.R",
        rmd="index.Rmd",
        # runinfo="data/metadata/runinfo_colnames.csv",
        tree="images/project_tree.txt",
        runselector="images/sra_run_selector.png",
        html2png=rules.static_snakemake_report.output.html2png,
        png=expand("images/{bioproject}_variable_freq.png",  bioproject=["PRJNA477349", "PRJNA685168"]),
        svg=expand("images/{bioproject}_variable_freq.svg",  bioproject=["PRJNA477349", "PRJNA685168"]),
        gps=expand("images/{bioproject}_gps.png", bioproject=["PRJNA477349", "PRJNA802976", "PRJEB21612"]),
        acc=expand("results/{bioproject}_sra_accessions.txt", bioproject=config["bioproject"]),
        asc=expand("results/{bioproject}_read_size_asc.csv", bioproject=["PRJNA477349", "PRJNA685168"]),
        desc=expand("results/{bioproject}_read_size_desc.csv", bioproject=["PRJNA477349", "PRJNA685168"]),
    output:
        doc="index.html",
    shell:
        """
        R -e "library(rmarkdown); render('{input.rmd}')"
        """

        # Explore SRA metadata



